# Fail2Ban configuration file
#
# OpenBSD pf ban/unban
#
# Author: Nick Hilliard <nick@foobar.org>
# Modified by: Alexander Koeppe making PF work seamless and with IPv4 and IPv6
#              Zane C. Bowers-Hadley adding kicking and {} to ports.
#
#

# Note on failure modes.
#
# By default this has the standard failure mode for stateful firewalls,
# that being the ban will only take place for new states, allowing potentially
# abusive actions by current states.
#
# PF has the option to kill states if desired. To use that, set kick=true
# in the ban action for a jail. If multiport is being used, the port must
# be specified numerically and must not be a range. If either are used and
# kick is set to true, then the IP will be added to the table, but it will
# throw an error about not being able to kick it.
#
# With this later failure mode, this does run ths risk of possibly killing
# current non-abusive states.

[Definition]

# Option:  actionstart
# Notes.:  command executed on demand at the first ban (or at the start of Fail2Ban if actionstart_on_demand is set to false).
# Values:  CMD
#
# We don't enable PF automatically; to enable run pfctl -e
# or add `pf_enable="YES"` to /etc/rc.conf (tested on FreeBSD)
# also, these rulesets are loaded into (nested) anchors
# to enable them, add as wildcard:
#     anchor "f2b/*"
# or using jail names:
#     anchor f2b {
#        anchor name1
#        anchor name2
#        ...
#     }
# to your main pf ruleset, where "namei" are the names of the jails
# which invoke this action
actionstart = echo "table <<tablename>-<name>> persist counters" | <pfctl> -f-
              port="<port>"; if [ "$port" != "" ] && case "$port" in \{*) false;; esac; then port="{$port}"; fi
              echo "<block> proto { <protocol> } from <<tablename>-<name>> to <actiontype>" | <pfctl> -f-

# Option:  start_on_demand - to start action on demand
# Example: `action=pf[actionstart_on_demand=true]`
actionstart_on_demand = false

# Option:  actionstop
# Notes.:  command executed at the stop of jail (or at the end of Fail2Ban)
# Values:  CMD
#
# we only disable PF rules we've installed prior
actionstop = <pfctl> -sr 2>/dev/null | grep -v <tablename>-<name> | <pfctl> -f-
             %(actionflush)s
             <pfctl> -t <tablename>-<name> -T kill

# Option:  actionflush
# Notes.:  command executed once to flush IPS, by shutdown (resp. by stop of the jail or this action)
# Values:  CMD
#
actionflush = <pfctl> -t <tablename>-<name> -T flush


# Option:  actioncheck
# Notes.:  command executed once before each actionban command
# Values:  CMD
#
actioncheck = <pfctl> -sr | grep -q <tablename>-<name>


# Option:  actionban
# Notes.:  command executed when banning an IP. Take care that the
#          command is executed with Fail2Ban user rights.
# Tags:    <ip>  IP address
#          <failures>  number of failures
#          <time>  unix timestamp of the ban time
#          <port>  ports being banned, if using multiport action
# Values:  CMD
#
actionban = <pfctl> -t <tablename>-<name> -T add <ip>; if [ "<kick>" = "true" ]; then
           RANGE_TEST=`echo "<port>" | sed "s/://"`
           NUM_TEST=`echo "<port>" | sed "s/[A-Za-z]//"`
           if [ "<actiontype>" = "any" ]; then
               pfctl -k <ip>
           elif [ "$RANGE_TEST" != "<port>" ]; then
               echo "kick=true does not work with numeric ranges"
               exit 1
           elif [ "$NUM_TEST" != <port> ]; then
               echo "kick=true requires the port number and not the port name"
               exit 1
           else
              PORT=`echo "<port>" | sed "s/ *, */|/g"`
              pfctl -s state -vv | grep -E '<*->*|id:'  | paste - - | grep -E ":$PORT " | grep -E "[[ ]<ip>]*:" | sed  "s/.*[\ \t]id:[\ \t]//" | cut -d " " -f 1 | paste -s - | xargs -I ID pfctl -k id -k ID
           fi; fi


# Option:  actionunban
# Notes.:  command executed when unbanning an IP. Take care that the
#          command is executed with Fail2Ban user rights.
# Tags:    <ip>  IP address
#          <failures>  number of failures
#          <time>  unix timestamp of the ban time
# Values:  CMD
#
# note -r option used to remove matching rule
actionunban = <pfctl> -t <tablename>-<name> -T delete <ip>


# Option: pfctl
#
# Use anchor as jailname to manipulate affected rulesets only.
# If more parameter expected it can be extended with `pf[pfctl="<known/pfctl> ..."]`
#
pfctl = pfctl -a f2b/<name>

[Init]
# Option:  tablename
# Notes.:  The pf table name.
# Values:  [ STRING ]
#
tablename = f2b

# Option: block
#
# The action you want pf to take.
# Probably, you want "block quick", but adjust as needed.
block = block quick


# Option:  protocol
# Notes.:  internally used by config reader for interpolations.
# Values:  [ tcp | udp | icmp | ipv6-icmp ] Default: tcp
#
protocol = tcp


# Option: actiontype
# Notes.: defines additions to the blocking rule
# Values: leave empty to block all attempts from the host
# Default: Value of the multiport
actiontype = <multiport>


# Option: allports
# Notes.: default addition to block all ports
# Usage.: use in jail config: "banaction = pf[actiontype=<allports>]"
allports = any


# Option: multiport
# Notes.: Blocks access only to specific ports. May be any valid value able
#         to be enclosed in {}. If using kick=true the ports must be
#         specified numerically and may not contain a range.
# Usage.: use in jail config: "banaction = pf[actiontype=<multiport>]"
#
# Examples:
# Port 22         : 'banaction = pf[actiontype=<multiport>,port="22"]'
# HTTP and HTTPS  : 'banaction = pf[actiontype=<multiport>,port="http,https"]'
# range 1 to 1024 : 'banaction = pf[actiontype=<multiport>,port="1:1024"]'
multiport = any port $port
